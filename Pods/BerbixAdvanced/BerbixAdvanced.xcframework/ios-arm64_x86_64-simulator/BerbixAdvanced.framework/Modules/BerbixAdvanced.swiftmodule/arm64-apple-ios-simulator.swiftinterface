// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BerbixAdvanced
import AVFoundation
@_exported import BerbixAdvanced
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
@_hasMissingDesignatedInitializers public class CameraMath {
  public static func calculateMinimumFocusDistance(fieldOfView: Swift.Float, minimumDocumentSize: Swift.Float, previewFillPercentage: Swift.Float) -> Swift.Float
  public static func degreesToRadians(_ degrees: Swift.Float) -> Swift.Float
  public static func radiansToDegrees(_ radians: Swift.Float) -> Swift.Float
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CameraPreview : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @_Concurrency.MainActor(unsafe) public var videoPreviewLayer: AVFoundation.AVCaptureVideoPreviewLayer {
    get
  }
  @_Concurrency.MainActor(unsafe) public var session: AVFoundation.AVCaptureSession? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cameraSession: BerbixAdvanced.CameraSession?
  @_Concurrency.MainActor(unsafe) public func convertRectangleObservation(_ observation: Vision.VNRectangleObservation) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) public func convertMetadata(_ metadata: AVFoundation.AVMetadataMachineReadableCodeObject) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) public func convertFaceObservation(_ observation: Vision.VNFaceObservation) -> CoreGraphics.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public typealias BarcodeDetectedBlock = (CoreGraphics.CGRect, Swift.String) -> Swift.Void
public typealias FaceDetectedBlock = (CoreGraphics.CGRect, CoreGraphics.CGFloat) -> Swift.Void
public typealias DocumentDetectedBlock = (CoreGraphics.CGRect) -> Swift.Void
public typealias PhotoTakenBlock = (AVFoundation.AVCapturePhoto) -> Swift.Void
public class CameraSession {
  public init()
  public enum SessionError : Swift.Error {
    case configurationFailed
    public static func == (a: BerbixAdvanced.CameraSession.SessionError, b: BerbixAdvanced.CameraSession.SessionError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Mode {
    case application
    case selfie
    case document
    case barcodeOnly
    public static func == (a: BerbixAdvanced.CameraSession.Mode, b: BerbixAdvanced.CameraSession.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var currentMode: BerbixAdvanced.CameraSession.Mode {
    get
  }
  public var isAutoCaptureEnabled: Swift.Bool {
    get
  }
  public var isAutoCaptureCompleted: Swift.Bool {
    get
  }
  public var sessionView: BerbixAdvanced.CameraPreview {
    get
  }
  public var onBarcodeDetected: BerbixAdvanced.BarcodeDetectedBlock? {
    get
    set
  }
  public var onFaceDetected: BerbixAdvanced.FaceDetectedBlock? {
    get
    set
  }
  public var onDocumentDetected: BerbixAdvanced.DocumentDetectedBlock? {
    get
    set
  }
  public var onPhotoTaken: BerbixAdvanced.PhotoTakenBlock? {
    get
    set
  }
  public func configureFor(mode: BerbixAdvanced.CameraSession.Mode, enableAutoCapture: Swift.Bool = false) throws
  public func start()
  public func stop()
  public func capturePhoto()
  @objc deinit
}
extension BerbixAdvanced.CameraSession.SessionError : Swift.Equatable {}
extension BerbixAdvanced.CameraSession.SessionError : Swift.Hashable {}
extension BerbixAdvanced.CameraSession.Mode : Swift.Equatable {}
extension BerbixAdvanced.CameraSession.Mode : Swift.Hashable {}
